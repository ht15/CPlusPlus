1. 为什么头文件中不能包含数据定义或类与函数的实现
  原因是可neng会重复定义，而重复定义可能发生在编译期或者是链接期
  编译期的重复定义问题可以通过宏定义进行消除： #ifndef __HEAD_H
                                           #define __HEAD_H
                                           
                                           #endif
                                       或者#pragma once
  链接期的重复定义则不能消除，因为每个源文件单独编译，在链接期才会出问题
  
2. 智能指针 #include<memory>
  	shared_ptr<TemplateTest> s_p1(TemplateTest::GetInstance());
	shared_ptr<TemplateTest> s_p2(s_p1);
  	//shared_ptr<TemplateTest> s_p2(TemplateTest::GetInstance());  //两者所得结果不同
	printf("s_p1: %d\n, s_p2: %d\n", s_p1.use_count(), s_p2.use_count());

3. 不定参数与c++内置宏定义
	#define hlog(level, ...) \
    do { \
        if (level<=Logger::getLogger().getLogLevel()) { \
            Logger::getLogger().logv(level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
        } \
    } while(0)
	Logger::logv(int level, const char* file, int line, const char* func, const char* fmt ...); // 貌似只有gcc可以 fmt ...这样表示
	其中...表示不定参数，使用方法一般如下：
		#include <stdarg.h>
		va_list args;
		va_start(args, fmt) // fmt用来标识不定参数的起始
		//va_arg(args, int) 可以设置不定参数的类型
		va_end(args)  //清理工作
	其中__FILE__为当前文件名的宏定义，__LINE__为行号，__func__为函数名，__VA_ARGS__为不定长参数
4. printf,sprintf,snprintf   #include<stdio.h>
	printf: 向控制台输出
	sprintf(char* dest,char* source) :把source写进dest
	snprintf(char* dest, int n, char*source): 写进source的前n-1个字符（gcc)
5. 模板类或模板函数的实现总是放在.h/头文件中
	在编译器和连接器的某一处，有一机制能去掉指定模板的多重定义。所以为了容易使用，几乎总是在头文件中放置全部的模板声明和定义。
6. 两个类互相引用
	在定义时，需要把握一个准则： 就是定义A类时需要知道B类的大小，定义B类时需要知道A类的大小，所以至少有一个类是以指针（4个字节）的形式出现
	在另一个类的定义中。
7. 局部静态变量
	局部static变量与全局变量一样，在程序开始运行期间就已经在内存中开辟了空间，直到程序结束才会释放这块内存空间。
	局部static变量只能在定义的子程序或代码块中访问，不能在外部访问，所以叫局部静态变量。
8. 匿名namespace
	匿名命名空间和声明为static的全局名称的链接属性是相同的，即名称的作用域被限制在当前文件中，无法通过在另外的文件中使用extern声明来进行链接。
9. syscall(SYS_gettid)获取唯一的线程id。 getpid()获取进程id， pthread_self()获取线程id(不唯一，各进程间可重复）
